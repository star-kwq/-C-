/*Description
有一Student类，每个学生对象都有姓名、年龄两项数据，但姓名不是在对象中存储，而是在堆中存储，对象中只是存放了姓名的首地址。
已知构造学生对象时，要么给定2项数据，要么一项也不给，若构造对象时不给任何数据，则默认姓名为“noname”，年龄为18。
 有一Teacher类，每个对象都有姓名和职称两项信息，两项信息都在对象中存储，构造教师时必须给定这两项信息。
 有一Tutor类，其对象由一名教师和一名学生组成，并且能随时提供一个数据：目前已经有多少个Tutor类的对象了。
 请你定义以上三个类，并完善下面的DispTutorNum函数，使程序能运行出正确结果。
说明： 能用系统自动生成的默认的函数，就不要自己定义，否则扣分
////////////////////////////////////////////////////////////////////////////////////////////////

//这里需要自己编代码：定义并实现三个类（用多文件结构）

void DispTutorNum()
{
       ____________; //这里需要添加代码，用来显示Tutor对象的个数
}

///////////////////以上代码都需要提交，包括完整的DispTutorNum函数///////////////////

//以下代码会自动添加到你代码的后面，不需要提交 

void fn(Tutor tutor)
{
       tutor.Out();
       DispTutorNum();   
}

 int main()
{
       DispTutorNum();  //显示此时已经有的Tutor对象个数
       char studentName[11],teacherName[11];
       int age;
       char title[20];
       cin>>studentName>>age;  //输入学生姓名和年龄
       Student s1,s2(studentName,age);
       cin>>teacherName>>title;  //输入教师姓名和职称
       Teacher t(teacherName,title);
       Tutor tutor1(teacherName, title, "sun", 19), tutor2(t,s2);
       tutor1.Out();
       tutor2.Out();
       fn(tutor2);
       DispTutorNum();  //显示此时的Tutor对象个数
       return 0;
}

Input
输入学生姓名和年龄
输入教师姓名和职称
Output
输出相应信息
输出学生信息格式样例：lisi,19
输出教师信息格式样例：zhang,professor
输出tutor信息格式：先输出教师两项信息，换行，再输出学生两项信息，换行
每次显示Tutor对象人数时，后面都有换行
Sample Input
lisi 19
zhang professor
Sample Output
不提供样例输出
*/
////////////////////////////////////////////////////////
//Student.h


#if !defined(AFX_STUDENT_H__0F09B3DC_DA3A_4773_BBE4_8C24A9CBE98F__INCLUDED_)
#define AFX_STUDENT_H__0F09B3DC_DA3A_4773_BBE4_8C24A9CBE98F__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

class Student  
{
public:
	Student(char *p="noname",int l=18);
	Student(Student &);
	virtual ~Student();
	void out();
protected:
	char * sname;
	int nl;
};

#endif // !defined(AFX_STUDENT_H__0F09B3DC_DA3A_4773_BBE4_8C24A9CBE98F__INCLUDED_)

////////////////////////////////////////////////////////
//Teacher.h


#if !defined(AFX_TEACHER_H__12D6E75F_AEF2_4041_96EC_05851BCB74C8__INCLUDED_)
#define AFX_TEACHER_H__12D6E75F_AEF2_4041_96EC_05851BCB74C8__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

class Teacher  
{
public:
	Teacher(char *t,char *c);
	Teacher(Teacher &);
	virtual ~Teacher();
	void out();
protected:
	char tname[20];
	char tzc[20];

};

#endif // !defined(AFX_TEACHER_H__12D6E75F_AEF2_4041_96EC_05851BCB74C8__INCLUDED_)

////////////////////////////////////////////////////////
//Tutor.h


#if !defined(AFX_TUTOR_H__1B28CFC0_4C6B_4030_874A_A5C8C76D2134__INCLUDED_)
#define AFX_TUTOR_H__1B28CFC0_4C6B_4030_874A_A5C8C76D2134__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


//#include "Teacher.h"
//#include "Student.h"   //这两行多文件用
class Tutor  
{
public:
	Tutor(char *tm,char *tz,char *sm="noname",int f=18);
	virtual ~Tutor();
	Tutor(Teacher &,Student &);
	Tutor(Tutor &t);
	static void chu();
	void Out();
protected:
	static int gs;
	Student xs;
	Teacher ls;
};

#endif // !defined(AFX_TUTOR_H__1B28CFC0_4C6B_4030_874A_A5C8C76D2134__INCLUDED_)


////////////////////////////////////////////////////////
//Teacher.cpp


//#include "Teacher.h"  //多文件用
#include<cstring>
#include<iostream>
using namespace std;

Teacher::Teacher(char *t,char *c)
{
	strcpy(tname,t);

	strcpy(tzc,c);

}
Teacher::Teacher(Teacher &s)
{
	strcpy(tname,s.tname);
	strcpy(tzc,s.tzc);
	
}
Teacher::~Teacher()
{

}
void Teacher::out()
{
	cout<<tname<<","<<tzc<<endl;
}

////////////////////////////////////////////////////////
//Student.cpp


/*
#include "Student.h"
#include<cstring>
#include<iostream>  //这几行多文件用
using namespace std;
*/

Student::Student(char *p,int l)
{
	sname=new char[strlen(p)+1];
	strcpy(sname,p);
	nl=l;

}
Student::Student(Student &s)
{
	sname=new char[strlen(s.sname)+1];
	strcpy(sname,s.sname);
	nl=s.nl;
}
Student::~Student()
{
	delete []sname;
}
void Student::out()
{
	cout<<sname<<","<<nl<<endl;
}
////////////////////////////////////////////////////////
//Tutor.cpp

/*
#include "Tutor.h"
#include "Teacher.h"
#include "Student.h" //这几行多文件用
#include<iostream>
using namespace std;
*/

int Tutor::gs=0;
void Tutor::chu()
{
	cout<<gs<<endl;
}
Tutor::Tutor(char *tm,char *tz,char *sm,int f):ls(tm,tz),xs(sm,f)
{
	gs++;
}


Tutor::Tutor(Teacher &t,Student &s):ls(t),xs(s)
{
	gs++;
}
Tutor::Tutor(Tutor &t):ls(t.ls),xs(t.xs)
{
	gs++;
}
Tutor::~Tutor()
{
	gs--;
}
void Tutor::Out()
{
	ls.out();
	xs.out();
}


//////////////////////////////////////////////////////
//zhu.cpp

//#include "Tutor.h"
//#include<iostream>    //这三行多文件用
//using namespace std;

void DispTutorNum()
{

	Tutor::chu(); //这里需要添加代码，用来显示Tutor对象的个数
}

//以下代码会自动添加到你代码的后面，不需要提交 

void fn(Tutor tutor)
{

      tutor.Out();

       DispTutorNum();  
}

 int main()
{
       DispTutorNum();  //显示此时已经有的Tutor对象个

       char studentName[11],teacherName[11];

       int age;

       char title[20];

       cin>>studentName>>age;  //输入学生姓名和年龄

       Student s1,s2(studentName,age);

       cin>>teacherName>>title;  //输入教师姓名和职称
       Teacher t(teacherName,title);

       Tutor tutor1(teacherName, title, "sun", 19), tutor2(t,s2);

       tutor1.Out();

       tutor2.Out();

       fn(tutor2);

       DispTutorNum();  //显示此时的Tutor对象个数

       return 0;

}
