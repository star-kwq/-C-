/*
Description
1、定义一个家具类，成员至少有一个：

char *ptype；//用来记录型号的存储位置，型号的内容存在堆中

其余数据成员和成员函数根据需要自行添加

2、定义一个Bed类，有型号、长宽高等数据，还有材质（木头的还是铁的）属性，并且具有可以睡觉的功能(Sleep()函数)。

3、定义一个Sofa类，有型号、长宽高等数据，还有一个属性：几人座，并且具有可以看电视的功能（WatchTV()函数）。

4、设计一个两用沙发类SleeperSofa，具有折叠（FoldOut()）功能，并且能随时返回该类产品的生产数量（GetNum()函数)。

以上各类的产品，均可以显示自己的属性(Disp()函数)

以下是主函数框架

int main()

{

char type[20]; //存储床、沙发等家具的型号

int a,b,c; //存储长宽高

char material[10]; //床的材质

int num; //沙发可坐人数量

/////////////////////////////////////////////////////

______________//输入床的数据 

Bed bed(________); //生成一个床

_____________//显示床的数据

_______________//展示睡觉功能

/////////////////////////////////////////////////////

______________//输入沙发的数据 

Sofa s(________);//生成一个沙发

_____________//显示沙发的数据

_______________//展示看电视功能

/////////////////////////////////////////////////////

____________//显示两用沙发产品数量

_____________//输入两用沙发的数据

SleeperSofa ss(___________);//生成一个两用沙发

____________//显示两用沙发各项数据

____________//显示两用沙发产品数量

//////////////////////////////////////////////////////

SleeperSofa sss(ss); //再生成一个

_______________//显示刚生成产品信息

______________//显示两用沙发产品数量

///////////////////////////////////////////////////////

_______________//堆中生成一个两用沙发,与前面sss数据相同

______________//显示堆中刚生成的产品信息

____________//显示两用沙发产品数量

///////////////////////////////////////////////////////

_____________//析构堆中产品

____________//显示两用沙发产品数量

/////////////////////////////////////////////////////////

_______________//展示ss睡觉功能

_______________//展示ss看电视功能

_______________//展示ss折叠功能

/////////////////////////////////////////////////////

       return 0;

}
Input
按主函数框架顺序输入相关信息

Output
输出相关信息

Sample Input
B_1 1 2 3 wood
S_2 4 5 6 3
SS_3 7 8 9 steel 3
Sample Output
type:B_1
length:1
width:2
high:3
material:wood
Sleep
type:S_2
length:4
width:5
high:6
Num:3
Watch TV
0
type:SS_3
length:7
width:8
high:9
material:steel
num:3
1
type:SS_3
length:7
width:8
high:9
material:steel
num:3
2
type:SS_3
length:7
width:8
high:9
material:steel
num:3
3
2
Sleep
Watch TV
Fold Out
*/
//////////////////////////////////////////////////////////////////////
// jiaju.h: interface for the jiaju class.
//

#if !defined(AFX_JIAJU_H__1E2A9A1E_DC4C_405E_BEEF_F022A12FE953__INCLUDED_)
#define AFX_JIAJU_H__1E2A9A1E_DC4C_405E_BEEF_F022A12FE953__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

class jiaju  
{
public:
	jiaju(char *,int,int,int);
	virtual ~jiaju();
	virtual void Disp()=0;
	void chu();
protected:
	char *ptype;//用来记录型号的存储位置，型号的内容存在堆中
	int c;
	int k;
	int g;
};

#endif // !defined(AFX_JIAJU_H__1E2A9A1E_DC4C_405E_BEEF_F022A12FE953__INCLUDED_)

//////////////////////////////////////////////////////////////////////
// Sofa.h: interface for the Sofa class.
//

#if !defined(AFX_SOFA_H__560CF1E4_2E62_426C_B660_55C8081B34C5__INCLUDED_)
#define AFX_SOFA_H__560CF1E4_2E62_426C_B660_55C8081B34C5__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

//#include"jiaju.h"       //多文件用
class Sofa:virtual public jiaju
{
public:
	Sofa(char*,int,int,int,int);
	void WatchTV();
	void Disp();
protected:
	int zw;
};

#endif // !defined(AFX_SOFA_H__560CF1E4_2E62_426C_B660_55C8081B34C5__INCLUDED_)

//////////////////////////////////////////////////////////////////////
// Bed.h: interface for the Bed class.
//

#if !defined(AFX_BED_H__796FA6E4_34B7_41C2_93ED_165BCB34348A__INCLUDED_)
#define AFX_BED_H__796FA6E4_34B7_41C2_93ED_165BCB34348A__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

//#include"jiaju.h"       //多文件用
class Bed:virtual public jiaju 
{
public:
	Bed(char*,int,int,int,char *);
	~Bed();
	void Sleep();
	void Disp();
protected:
	char *cz;
};

#endif // !defined(AFX_BED_H__796FA6E4_34B7_41C2_93ED_165BCB34348A__INCLUDED_)

//////////////////////////////////////////////////////////////////////
// SleeperSofa.h: interface for the SleeperSofa class.
//

#if !defined(AFX_SLEEPERSOFA_H__822CAB28_8966_468D_AB0B_F31EB8E1AE90__INCLUDED_)
#define AFX_SLEEPERSOFA_H__822CAB28_8966_468D_AB0B_F31EB8E1AE90__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

//#include"Bed.h"       //多文件用
//#include"Sofa.h"       //多文件用
class SleeperSofa:public Bed,public Sofa
{
public:
	SleeperSofa(char *,int,int,int,char *,int);
	SleeperSofa(SleeperSofa &);
	virtual ~SleeperSofa();
	static void GetNum();
	void FoldOut();
	void Disp();
protected:
	static int sl;
};

#endif // !defined(AFX_SLEEPERSOFA_H__822CAB28_8966_468D_AB0B_F31EB8E1AE90__INCLUDED_)

//////////////////////////////////////////////////////////////////////
// jiaju.cpp: implementation of the jiaju class.
//

//#include "jiaju.h"       //多文件用
#include<iostream>
using namespace std;
#include"cstring"

jiaju::jiaju(char *p,int C,int K,int G)
{
	ptype=new char[strlen(p)+1];
	strcpy(ptype,p);
	c=C;
	k=K;
	g=G;
}

jiaju::~jiaju()
{
	delete []ptype;
}

void jiaju::chu()
{
	cout<<"type:"<<ptype<<endl;
	cout<<"length:"<<c<<endl;
	cout<<"width:"<<k<<endl;
	cout<<"high:"<<g<<endl;
}


//////////////////////////////////////////////////////////////////////
// Bed.cpp: implementation of the Bed class.
//
/*
#include "Bed.h"
#include<iostream>
using namespace std;       //多文件用
#include"cstring"
*/
Bed::Bed(char*a,int c,int k,int g,char * p):jiaju(a,c,k,g)
{
	cz=new char[strlen(p)+1];
	strcpy(cz,p);
}

Bed::~Bed()
{
	delete []cz;
}
void Bed::Sleep()
{
	cout<<"Sleep"<<endl;
}
void Bed::Disp()
{
	jiaju::chu();
	cout<<"material:"<<cz<<endl;
}
//////////////////////////////////////////////////////////////////////
// Sofa.cpp: implementation of the Sofa class.
//
/*
#include "Sofa.h"
#include<iostream>       //多文件用
using namespace std;
*/
Sofa::Sofa(char* a,int c,int k,int g,int z):jiaju(a,c,k,g)
{
	zw=z;
}

void Sofa::WatchTV()
{
	cout<<"Watch TV"<<endl;
}

void Sofa::Disp()
{
	jiaju::chu();
	cout<<"Num:"<<zw<<endl;
}
//////////////////////////////////////////////////////////////////////
// SleeperSofa.cpp: implementation of the SleeperSofa class.
//
/*
#include "SleeperSofa.h"
#include<iostream>       //多文件用
using namespace std;
*/
int SleeperSofa::sl=0;

SleeperSofa::SleeperSofa(char *lx,int c,int k,int g,char * cz,int zw):Sofa(lx,c,k,g,zw),Bed(lx,c,k,g,cz),jiaju(lx,c,k,g)
{
	sl++;
}

SleeperSofa::SleeperSofa(SleeperSofa &ss):Sofa(ss.ptype,ss.c,ss.k,ss.g,ss.zw),Bed(ss.ptype,ss.c,ss.k,ss.g,ss.cz),jiaju(ss.ptype,ss.c,ss.k,ss.g)
{
	sl++;
}

SleeperSofa::~SleeperSofa()
{
	sl--;
}
void SleeperSofa::GetNum()
{
	cout<<sl<<endl;
}
void SleeperSofa::Disp()
{
	jiaju::chu();
	cout<<"material:"<<cz<<endl;
	cout<<"num:"<<zw<<endl;
}
void SleeperSofa::FoldOut()
{
	cout<<"Fold Out"<<endl;
}
//////////////////////////////////////////////
//main.cpp
/*
#include<iostream>
using namespace std;       //多文件用
#include"SleeperSofa.h"
*/
int main()
{
	char type[20]; //存储床、沙发等家具的型号
	int a,b,c; //存储长宽高
	char material[10]; //床的材质
	int num; //沙发可坐人数量
/////////////////////////////////////////////////////
	cin>>type>>a>>b>>c>>material;//输入床的数据 
	Bed bed(type,a,b,c,material); //生成一个床
	bed.Disp();//显示床的数据
	bed.Sleep();//展示睡觉功能
/////////////////////////////////////////////////////
	cin>>type>>a>>b>>c>>num;//输入沙发的数据 
	Sofa s(type,a,b,c,num);//生成一个沙发
	s.Disp();//显示沙发的数据
	s.WatchTV();//展示看电视功能
/////////////////////////////////////////////////////
	SleeperSofa::GetNum();//显示两用沙发产品数量
	cin>>type>>a>>b>>c>>material>>num;//输入两用沙发的数据
	SleeperSofa ss(type,a,b,c,material,num);//生成一个两用沙发
	ss.Disp();//显示两用沙发各项数据
	SleeperSofa::GetNum();//显示两用沙发产品数量
//////////////////////////////////////////////////////
	SleeperSofa sss(ss); //再生成一个
	sss.Disp();//显示刚生成产品信息
	SleeperSofa::GetNum();//显示两用沙发产品数量
///////////////////////////////////////////////////////
	SleeperSofa *d=new SleeperSofa(ss);//堆中生成一个两用沙发,与前面sss数据相同
	d->Disp();//显示堆中刚生成的产品信息
	SleeperSofa::GetNum();//显示两用沙发产品数量
///////////////////////////////////////////////////////
	delete d;//析构堆中产品
	SleeperSofa::GetNum();//显示两用沙发产品数量
/////////////////////////////////////////////////////////
	ss.Sleep();//展示ss睡觉功能
	ss.WatchTV();//展示ss看电视功能
	ss.FoldOut();//展示ss折叠功能
/////////////////////////////////////////////////////
	return 0;

}