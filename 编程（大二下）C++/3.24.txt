/*Description
生成一个学生类，有两个成员：其一为指针变量char *pname，用来存储名字在堆中的存储位置；其二为score，用来存储分数（int 型）：


private：


      char *pname；   //名字在堆中找空间存放，pname存储其起始位置


      int  score；



请你完善该类，使得执行下面的程序时，输出相关信息。


int  main()


{   char   name[10];


     int  score;


    cin>>name>>score;


     Student  s1,  s2(name, score),  s3(s2);


     s1.Disp();


     s2.Disp();


     s3.Disp();


     Student  s4=s3;


     s4.Disp();


     return 0;


}


说明：此主函数已在后台，提交时会自动添加到你的代码后面。


要求：


    1、 对于没有指定姓名和分数的对象，生成时，其名字为“None”，分数为0


    2、构造对象时，要输出相关信息，比如构造zhangsan时输出：construct  zhangsan,析构时输出：destruct   zhangsan


    3、如果用到拷贝构造，也要输出信息，如：copy  zhangsan  

Input
输入第二个学生的信息


Output
输出四个学生的信息及构造、拷贝构造和析构信息

Sample Input
lisi 70
Sample Output
construct None
construct lisi
copy lisi
None 0
lisi 70
lisi 70
copy lisi
lisi 70
destruct lisi
destruct lisi
destruct lisi
destruct None*/
#include<iostream>
#include<cstring>
using namespace std;

class Student
{
public:
    Student();//构造1
	Student(char *p,int t);//构造2
	Student(Student &s);//拷贝
	~Student();//析构
	void Disp();//输出
private:
	char * pname;  //名字在堆中找空间存放，pname存储其起始位置
    int  score;
};

void Student::Disp()//输出
{
	cout<<pname<<" "<<score<<endl;
}

Student::Student(Student &s)//拷贝
{
	pname=new char[10];
	strcpy(pname,s.pname);
	score=s.score;
	cout<<"copy"<<" "<<pname<<endl;
	
}
Student::Student()//构造1
{
	pname=new char[10];
	strcpy(pname,"None");
	score=0;
	cout<<"construct"<<" "<<pname<<endl;

}

Student::Student(char *p,int t)//构造2
{
	pname=new char[10];
	strcpy(pname,p);
	score=t;
	cout<<"construct"<<" "<<pname<<endl;

}
Student::~Student()//析构
{
	cout<<"destruct"<<" "<<pname<<endl;
	delete []pname;

}

int  main()
{
	char name[10];
    int  score;
    cin>>name>>score;
    Student  s1,s2(name,score),s3(s2);
    s1.Disp();
    s2.Disp();
    s3.Disp();
    Student s4=s3;
    s4.Disp();
    return 0;

}
**************************************************************************************************************
/*Description

1、定义一个Name类，其数据成员只有一个char *pname,用来存储姓名在内存中的位置。

2、再定义一个Student类，其成员包括：

        int  n;   //学号

        Name name;  

3、主程序主要代码如下：


 void fn(Student x)

 {

        x.Disp();

 }


 int main()

 { 

        int n;

        char name[10];

        cin>>n>>name; 

        Student s(n,name); 

        fn(s);

        return 0;

 }


根据上面的代码，给两个类添加相应的成员函数，并完善整个程序，然后提交。

Input

输入一个学号，一个姓名

Output

输出两行，分别是学号和姓名

Sample Input

1
zhangsan
Sample Output

Num:1
Name:zhangsan
Code 1 here:*/
//Name.h
class Name
{
public:
	Name(char *p);//构造
	Name(Name &s);//拷贝
	~Name();//析构
	void Disp();//输出
private:
	char *pname;  
};
//////////////////////////////////////////////////////
//Student.h
class Student
{
public:
	Student(int ,char [10]);//构造
	Student(Student &s);//拷贝
	~Student();//析构
	void Disp();//输出
private:
	int  n;   //学号
	Name name;  
};




//////////////////////////////////////////////////////
//Name.cpp
#include<iostream>
#include<cstring>
using namespace std;
//#include"Name.h"               //多文件用
void Name::Disp()//输出
{
	cout<<"Name:"<<pname<<endl;
}
Name::Name(Name &s)//拷贝
{
	pname=new char[10];
	strcpy(pname,s.pname);	
}
Name::Name(char *p)//构造Name
{
	pname=new char[10];
	strcpy(pname,p);
}
Name::~Name()//析构
{
	delete []pname;
}



//////////////////////////////////////////////////////
//Student.cpp

//#include<iostream>              //多文件用
//#include<cstring>              //多文件用
//using namespace std;              //多文件用
//#include"Student.h"               //多文件用
//#include"Name.h"               //多文件用
void Student::Disp()//输出
{
	cout<<"Num:"<<n<<endl;
	name.Disp();
}


Student::Student(Student &s):name(s.name)//拷贝
{
	n=s.n;
}


Student::Student(int nn,char m[10]):name(m)//构造Student
{
	n=nn;
}


Student::~Student()//析构
{
}
//////////////////////////////////////////////////////
//z.cpp
//#include<iostream>              //多文件用
//#include<cstring>              //多文件用
//using namespace std;              //多文件用
//#include"Student.h"               //多文件用

 void fn(Student x)

 {

        x.Disp();

 }
 int main()
 { 

        int n;

        char name[10];

        cin>>n>>name; 

        Student s(n,name); 

        fn(s);

        return 0;

 }